#calculate power
power.p2f <- power.function(type = "greater", mu0 = .1, mu1 = .2,
alpha = 0.05, sigma2 = sds^2, n = 200)
make.plot(sds, power.p2f, hline.int = 0.8, x.lab = "SD", y.lab = "power")
# store sd sequence
sds <- seq(0.25, 0.75, by = 0.05)
#calculate power
power.p2f <- power.function(type = "greater", mu0 = .1, mu1 = .2,
alpha = 0.05, sigma2 = sds^2, n = 200)
make.plot(sds, power.p2f, hline.int = 0.8, vline.int = 0.54, x.lab = "SD", y.lab = "power")
# store sd sequence
sds <- seq(0.25, 0.75, by = 0.05)
#calculate power
power.p2f <- power.function(type = "greater", mu0 = .1, mu1 = .2,
alpha = 0.05, sigma2 = sds^2, n = 200)
make.plot(sds, power.p2f, hline.int = 0.8, vline.int = 0.54, x.lab = "SD", y.lab = "power")
?summary(power.p2f)
summary(power.p2f)
# store sd sequence
sds <- seq(0.25, 0.75, by = 0.05)
#calculate power
power.p2f <- power.function(type = "greater", mu0 = .1, mu1 = .2,
alpha = 0.05, sigma2 = sds^2, n = 200)
make.plot(sds, power.p2f, hline.int = 0.8, vline.int = 0.54, x.lab = "SD", y.lab = "power")
make.plot(sampsi, power.p2e, hline.int = 0.8, vline.int = 184, annot = "Intersection is the sample\nsize we originally calculated", x.lab = "sample size", y.lab = "power") + annot("text", x = 300, y = .9, label = "hello")
make.plot(sampsi, power.p2e, hline.int = 0.8, vline.int = 184, annot = "Intersection is the sample\nsize we originally calculated", x.lab = "sample size", y.lab = "power") + annotate("text", x = 300, y = .9, label = "hello")
# sample size
sampsi <- seq(100, 500, by = 25)
# power
power.p2e <- power.function(type = "greater", mu0 = .1, mu1 = .2,
alpha = .05, sigma2 = .54^2, n = sampsi)
# ggplot
library(ggplot2)
library(ggthemes)
make.plot <- function(xaxis, yaxis, hline.int = NULL, vline.int = NULL,
annot = "", x.lab = "", y.lab = "") {
ggplot(data.frame(xaxis, yaxis), aes(x = xaxis, y = yaxis)) +
geom_hline(yintercept = hline.int, col = "grey", linetype = 2, size = .5) +
geom_vline(xintercept = vline.int, col = "grey", linetype = 2, size = .5) +
geom_line(size = .5, col = "#990000") +
geom_point(shape = 21, size = 2, col = "#990000", fill = "white") +
labs(x = x.lab, y = y.lab) +
theme_tufte(ticks = F)
}
make.plot(sampsi, power.p2e, hline.int = 0.8, vline.int = 184,
x.lab = "sample size", y.lab = "power") +
annotate("text", x = 450, y = .7,
label = "Intersection is the sample\nsize we originally calculated",
family = "serif", fontface = "italic", size = 3, hjust = 1)
# store sd sequence
sds <- seq(0.25, 0.75, by = 0.05)
#calculate power
power.p2f <- power.function(type = "greater", mu0 = .1, mu1 = .2,
alpha = 0.05, sigma2 = sds^2, n = 200)
make.plot(sds, power.p2f, hline.int = 0.8, vline.int = 0.54, x.lab = "SD", y.lab = "power")
# store sd sequence
sds <- seq(0.25, 0.75, by = 0.05)
#calculate power
power.p2f <- power.function(type = "greater", mu0 = .1, mu1 = .2,
alpha = 0.05, sigma2 = sds^2, n = 200)
make.plot(sds, power.p2f, hline.int = 0.8, vline.int = 0.54,
x.lab = "SD", y.lab = "power") +
annotate("text", x = 0.4, y = 0.65, label = paste("Vertical line = sample", $\sigma$))
# store sd sequence
sds <- seq(0.25, 0.75, by = 0.05)
#calculate power
power.p2f <- power.function(type = "greater", mu0 = .1, mu1 = .2,
alpha = 0.05, sigma2 = sds^2, n = 200)
make.plot(sds, power.p2f, hline.int = 0.8, vline.int = 0.54,
x.lab = "SD", y.lab = "power") +
annotate("text", x = 0.4, y = 0.65, label = "Vertical line = sample SD")
# store sd sequence
sds <- seq(0.25, 0.75, by = 0.05)
#calculate power
power.p2f <- power.function(type = "greater", mu0 = .1, mu1 = .2,
alpha = 0.05, sigma2 = sds^2, n = 200)
make.plot(sds, power.p2f, hline.int = 0.8, vline.int = 0.54,
x.lab = "SD", y.lab = "power") +
annotate("text", x = 0.4, y = 0.65, label = "Vertical line = sample SD",
family = "serif", fontface = "italic", size = 3, hjust = 1)
# store sd sequence
sds <- seq(0.25, 0.75, by = 0.05)
#calculate power
power.p2f <- power.function(type = "greater", mu0 = .1, mu1 = .2,
alpha = 0.05, sigma2 = sds^2, n = 200)
make.plot(sds, power.p2f, hline.int = 0.8, vline.int = 0.54,
x.lab = "SD", y.lab = "power") +
annotate("text", x = 0.5, y = 0.65, label = "Vertical line =\nsample SD",
family = "serif", fontface = "italic", size = 3, hjust = 1) +
scale_x_continuous(breaks = seq(0.25, .75, by = 0.05))
# store sd sequence
sds <- seq(0.25, 0.75, by = 0.05)
#calculate power
power.p2f <- power.function(type = "greater", mu0 = .1, mu1 = .2,
alpha = 0.05, sigma2 = sds^2, n = 200)
make.plot(sds, power.p2f, hline.int = 0.8, vline.int = 0.54,
x.lab = "SD", y.lab = "power") +
annotate("text", x = 0.5, y = 0.65, label = "Vertical line =\nsample SD",
family = "serif", fontface = "italic", size = 3, hjust = 1) +
scale_x_continuous(breaks = seq(0.25, .75, by = 0.10))
e0 <- rep(.1, 10)
e1 <- seq(0.15, 0.25, by = 0.01)
e2 <- e1-e0
es <- seq(0.05, 0.15, by = 0.01)
e0 <- rep(0.10, 11)
e1 <- seq(0.15, 0.25, by = 0.01)
e2 <- e1-e0
e2
power.p2g <- power.function(type = "greater", mu0 = e0, mu1 = e1,
alphpa = 0.05, sigma2 = 0.54^2, n = 200)
power.p2g <- power.function(type = "greater", mu0 = e0, mu1 = e1,
alpha = 0.05, sigma2 = 0.54^2, n = 200)
# store effect sizes and mus
es <- seq(0.05, 0.15, by = 0.01)
e0 <- rep(0.10, 11)
e1 <- seq(0.15, 0.25, by = 0.01)
# calculate power
power.p2g <- power.function(type = "greater", mu0 = e0, mu1 = e1,
alpha = 0.05, sigma2 = 0.54^2, n = 200)
# build plot
make.plot(es, power.p2g, hline.int = 0.8, vline.int = 0.10,
x.lab = "effect size", y.lab = "power") +
# store effect sizes and mus
es <- seq(0.05, 0.15, by = 0.01)
e0 <- rep(0.10, 11)
e1 <- seq(0.15, 0.25, by = 0.01)
# calculate power
power.p2g <- power.function(type = "greater", mu0 = e0, mu1 = e1,
alpha = 0.05, sigma2 = 0.54^2, n = 200)
# build plot
make.plot(es, power.p2g, hline.int = 0.8, vline.int = 0.10,
x.lab = "effect size", y.lab = "power")
# store effect sizes and mus
es <- seq(0.05, 0.15, by = 0.01)
e0 <- rep(0.10, 11)
e1 <- seq(0.15, 0.25, by = 0.01)
# calculate power
power.p2g <- power.function(type = "greater", mu0 = e0, mu1 = e1,
alpha = 0.05, sigma2 = 0.54^2, n = 200)
# build plot
make.plot(es, power.p2g, hline.int = 0.8, vline.int = 0.10,
x.lab = "effect size", y.lab = "power") +
scale_x_continuous(breaks = seq(0.05, 0.15, by = 0.025), digits = 2)
# store effect sizes and mus
es <- seq(0.05, 0.15, by = 0.01)
e0 <- rep(0.10, 11)
e1 <- seq(0.15, 0.25, by = 0.01)
# calculate power
power.p2g <- power.function(type = "greater", mu0 = e0, mu1 = e1,
alpha = 0.05, sigma2 = 0.54^2, n = 200)
# build plot
make.plot(es, power.p2g, hline.int = 0.8, vline.int = 0.10,
x.lab = "effect size", y.lab = "power") +
scale_x_continuous(breaks = seq(0.05, 0.15, by = 0.025))
# store effect sizes and mus
es <- seq(0.05, 0.15, by = 0.01)
e0 <- rep(0.10, 11)
e1 <- seq(0.15, 0.25, by = 0.01)
# calculate power
power.p2g <- power.function(type = "greater", mu0 = e0, mu1 = e1,
alpha = 0.05, sigma2 = 0.54^2, n = 200)
# build plot
make.plot(es, power.p2g, hline.int = 0.8, vline.int = 0.10,
x.lab = "effect size", y.lab = "power")
a <- c(.0001, .001, .01, .05, .10)
# store alphas
a <- c(.0001, .001, .01, .05, .10)
# calculate power
power.p2h <- power.function(type = "greater", mu0 = .1, mu1 = .2,
alpha = a, sigma2 = 0.54^2, n = 200)
# build plot
make.plot(es, power.p2h, hline.int = 0.8, vline.int = 0.10,
x.lab = "effect size", y.lab = "power")
# store alphas
a <- c(.0001, .001, .01, .05, .10)
# calculate power
power.p2h <- power.function(type = "greater", mu0 = .1, mu1 = .2,
alpha = a, sigma2 = 0.54^2, n = 200)
# build plot
make.plot(a, power.p2h, hline.int = 0.8, vline.int = 0.10,
x.lab = "alpha", y.lab = "power")
# store alphas
a <- c(.0001, .001, .01, .05, .10)
# calculate power
power.p2h <- power.function(type = "greater", mu0 = .1, mu1 = .2,
alpha = a, sigma2 = 0.54^2, n = 200)
# build plot
make.plot(a, power.p2h, hline.int = 0.8, vline.int = 0.10,
x.lab = "alpha", y.lab = "power") +
scale_x_continuous(breaks = c(.0001, .001, .01, .05 .10))
# store alphas
a <- c(.0001, .001, .01, .05, .10)
# calculate power
power.p2h <- power.function(type = "greater", mu0 = .1, mu1 = .2,
alpha = a, sigma2 = 0.54^2, n = 200)
# build plot
make.plot(a, power.p2h, hline.int = 0.8, vline.int = 0.10,
x.lab = "alpha", y.lab = "power") +
scale_x_continuous(breaks = c(.0001, .001, .01, .05, .10))
# store alphas
a <- c(.0001, .001, .01, .05, .10)
# calculate power
power.p2h <- power.function(type = "greater", mu0 = .1, mu1 = .2,
alpha = a, sigma2 = 0.54^2, n = 200)
# build plot
make.plot(a, power.p2h, hline.int = 0.8, vline.int = 0.05,
x.lab = "alpha", y.lab = "power") +
scale_x_continuous(breaks = c(.0001, .001, .01, .05, .10))
?scale_x_continuous
# store alphas
a <- c(.0001, .001, .01, .05, .10)
# calculate power
power.p2h <- power.function(type = "greater", mu0 = .1, mu1 = .2,
alpha = a, sigma2 = 0.54^2, n = 200)
# build plot
make.plot(a, power.p2h, hline.int = 0.8, vline.int = 0.05,
x.lab = "alpha", y.lab = "power") +
scale_x_continuous(breaks = c(.0001, .001, .01, .05, .10))
# store alphas
a <- c(.0001, .001, .01, .05, .10)
# calculate power
power.p2h <- power.function(type = "greater", mu0 = .1, mu1 = .2,
alpha = a, sigma2 = 0.54^2, n = 200)
# build plot
make.plot(a, power.p2h, hline.int = 0.8, vline.int = 0.05,
x.lab = "alpha", y.lab = "power") +
scale_x_continuous(breaks = c(.0001, .001, .01, .05, .10))
# store alphas
a <- c(.0001, .001, .01, .05, .10)
# calculate power
power.p2h <- power.function(type = "greater", mu0 = .1, mu1 = .2,
alpha = a, sigma2 = 0.54^2, n = 200)
# build plot
make.plot(a, power.p2h, hline.int = 0.8, vline.int = 0.05,
x.lab = "alpha", y.lab = "power") +
scale_x_continuous(breaks = c(.0001, .01, .05, .10))
# store alphas
a <- c(.0001, .001, .01, .05, .10)
# calculate power
power.p2h <- power.function(type = "greater", mu0 = .1, mu1 = .2,
alpha = a, sigma2 = 0.54^2, n = 200)
# build plot
make.plot(a, power.p2h, hline.int = 0.8, vline.int = 0.05,
x.lab = "alpha", y.lab = "power") +
scale_x_continuous(breaks = c(".0001", ".01", ".05", ".10"))
# store alphas
a <- c(.0001, .001, .01, .05, .10)
# calculate power
power.p2h <- power.function(type = "greater", mu0 = .1, mu1 = .2,
alpha = a, sigma2 = 0.54^2, n = 200)
# build plot
make.plot(a, power.p2h, hline.int = 0.8, vline.int = 0.05,
x.lab = "alpha", y.lab = "power") +
scale_x_continuous(breaks = c(.0001, .01, .05, .10))
# store alphas
a <- c(.0001, .001, .01, .05, .10)
# calculate power
power.p2h <- power.function(type = "greater", mu0 = .1, mu1 = .2,
alpha = a, sigma2 = 0.54^2, n = 200)
# build plot
make.plot(a, power.p2h, hline.int = 0.8, vline.int = 0.05,
x.lab = "alpha", y.lab = "power") +
scale_x_continuous(breaks = c(.0001, .01, .05, .10), labels = function(n){format(n, scientific = F)})
# store alphas
a <- c(.0001, .001, .01, .05, .10)
# calculate power
power.p2h <- power.function(type = "greater", mu0 = .1, mu1 = .2,
alpha = a, sigma2 = 0.54^2, n = 200)
# build plot
make.plot(a, power.p2h, hline.int = 0.8, vline.int = 0.05,
x.lab = "alpha", y.lab = "power") +
scale_x_continuous(breaks = c(.0001, .01, .05, .10), labels = c(".0001", ".01", ".05", ".10"))
# store alphas
a <- c(.0001, .001, .01, .05, .10)
# calculate power
power.p2h <- power.function(type = "greater", mu0 = .1, mu1 = .2,
alpha = a, sigma2 = 0.54^2, n = 200)
# build plot
make.plot(a, power.p2h, hline.int = 0.8, vline.int = 0.05,
x.lab = "alpha", y.lab = "power") +
scale_x_continuous(breaks = c(.0001, .01, .05, .10),
labels = c(".0001", ".01", ".05", ".10")) +
scale_y_continuous(breaks = seq(.10, .80, by = .1))
# store alphas
a <- c(.0001, .001, .01, .05, .10)
# calculate power
power.p2h <- power.function(type = "greater", mu0 = .1, mu1 = .2,
alpha = a, sigma2 = 0.54^2, n = 200)
# build plot
make.plot(a, power.p2h, hline.int = 0.8, vline.int = 0.05,
x.lab = "alpha", y.lab = "power") +
scale_x_continuous(breaks = c(.0001, .01, .05, .10),
labels = c(".0001", ".01", ".05", ".10")) +
scale_y_continuous(breaks = seq(.20, .80, by = .1))
# store alphas
a <- c(.0001, .001, .01, .05, .10)
# calculate power
power.p2h <- power.function(type = "greater", mu0 = .1, mu1 = .2,
alpha = a, sigma2 = 0.54^2, n = 200)
# build plot
make.plot(a, power.p2h, hline.int = 0.8, vline.int = 0.05,
x.lab = "alpha", y.lab = "power") +
scale_x_continuous(breaks = c(.0001, .01, .05, .10),
labels = c(".0001", ".01", ".05", ".10")) +
scale_y_continuous(breaks = seq(.20, .80, by = .2))
# store alphas
a <- c(.0001, .001, .01, .05, .10)
# calculate power
power.p2h <- power.function(type = "greater", mu0 = .1, mu1 = .2,
alpha = a, sigma2 = 0.54^2, n = 200)
# build plot
make.plot(a, power.p2h, hline.int = 0.8, vline.int = 0.05,
x.lab = "alpha", y.lab = "power") +
scale_x_continuous(breaks = c(.0001, .01, .05, .10),
labels = c(".0001", ".01", ".05", ".10")) +
scale_y_continuous(breaks = seq(.10, .90, by = .1))
library(shiny); runApp('C:/Users/Jason/Desktop/norm_calc.R')
pnorm(1.96, lower.tail = F)
runApp('C:/Users/Jason/Desktop/norm_calc.R')
plot(dnorm(0,1))
curve(dnorm(0,1))
curve(plot(dnorm(0,1)))
?curve
plot(sing)
plot(sin)
curve(sin)
curve(dnorm())
curve(rnorm(0,1))
plot(rnorm(0,1))
?polygon
library(tesseract)
?tesseract
ne <- ocr("C:/Users/Jason/Desktop/ne.gif")
ne
library(tesseract)
stuff <- tesseract("C:/Users/Jason/Desktop/thing.png")
stuff <- ocr("C:/Users/Jason/Desktop/thing.png")
stuff
h <- c(105, 100, 98, 98)
h.w <- c(5, 5, 5, 5)
c <- 100
h.w <- 5
m <- 101
m.w <- 20
sum(h,c,m)
sum(h,c,m) / sum(h.w, c.w, m.w)
h <- c(105, 100, 98, 98)
h.w <- c(5, 5, 5, 5)
c <- 100
c.w <- 5
m <- 101
m.w <- 20
sum(h,c,m) / sum(h.w, c.w, m.w)
h <- c(1.05, 1.00, .98, .98)
h.w <- c(5, 5, 5, 5)
c <- 1.00
c.w <- 5
m <- 1.01
m.w <- 20
sum(h,c,m) / sum(h.w, c.w, m.w)
g <- c(105, 100, 98, 98, 100, 101)
w <- c(5, 5, 5, 5, 5, 20)
(g*w)/sum(w)
sum((g*w))/sum(w)
g <- c(105, 100, 98, 98, 100, 101, 0)
w <- c(5, 5, 5, 5, 5, 20, 0)
sum((g*w))/sum(w)
g <- c(105, 100, 98, 98, 100, 101, 0)
w <- c(5, 5, 5, 5, 5, 20, 5)
sum((g*w))/sum(w)
g <- c(105, 100, 98, 98, 100, 101, 50)
w <- c(5, 5, 5, 5, 5, 20, 5)
sum((g*w))/sum(w)
g <- c(105, 100, 98, 98, 100, 101, 75)
w <- c(5, 5, 5, 5, 5, 20, 5)
sum((g*w))/sum(w)
shiny::runApp('C:/Users/Jason/Google Drive/Brown/c_stats-computing_1/final_project/mapping_project/app/Counties')
load("C:/Users/Jason/Google Drive/Brown/c_stats-computing_1/final_project/mapping_project/app/Counties/basefile.Rda")
View(basefile)
runApp('C:/Users/Jason/Google Drive/Brown/c_stats-computing_1/final_project/mapping_project/app/Counties')
ggplot(basefile[1:10], aes(x = pctwhite)) + geom_histogram()
ggplot(basefile[1:10,], aes(x = pctwhite)) + geom_histogram()
runApp('C:/Users/Jason/Google Drive/Brown/c_stats-computing_1/final_project/mapping_project/app/Counties')
runApp('C:/Users/Jason/Google Drive/Brown/c_stats-computing_1/final_project/mapping_project/app/Counties')
runApp('C:/Users/Jason/Google Drive/Brown/c_stats-computing_1/final_project/mapping_project/app/Counties')
runApp('C:/Users/Jason/Google Drive/Brown/c_stats-computing_1/final_project/mapping_project/app/Counties')
runApp('C:/Users/Jason/Google Drive/Brown/c_stats-computing_1/final_project/mapping_project/app/Counties')
y <- rnorm(1000, 5, 1)
x <- rnorm(1000, 18, 2)
lm(y~x)
fit <- lm(y~x)
plot(fit)
?plot
library(ggplot2)
ggplot(data.frame(x=x,y=y), aes(x = x, y = y)) + geom_smooth()
?geom_smooth()
ggplot(data.frame(x=x,y=y), aes(x = x, y = y)) + geom_smooth(method = "loess")
ggplot(data.frame(x=x,y=y), aes(x = x, y = y)) + geom_smooth(method = "lm")
ggplot(data.frame(x=x,y=y), aes(x = x, y = y)) + geom_point() + geom_smooth(method = "lm")
ggplot(data.frame(x=x,y=y), aes(x = x, y = y)) + geom_point() + geom_smooth(method = "loess")
dev.new()
ggplot(data.frame(x=x,y=y), aes(x = x, y = y)) + geom_point() + geom_smooth(method = "loess")
ggplot(data.frame(x=x,y=y), aes(x = x, y = y)) + geom_point() + geom_smooth(method = "loess") _ theme_bw()
dev.new()
ggplot(data.frame(x=x,y=y), aes(x = x, y = y)) + geom_point() + geom_smooth(method = "loess") + theme_bw()
library(shiny); runApp('C:/Users/Jason/Google Drive/Brown/c_stats-computing_1/final_project/mapping_project/app/Counties/app_2016_11_29.R')
runApp('C:/Users/Jason/Google Drive/Brown/c_stats-computing_1/final_project/mapping_project/app/Counties/app_2016_11_29.R')
runApp('C:/Users/Jason/Google Drive/Brown/c_stats-computing_1/final_project/mapping_project/app/Counties/app_2016_11_29.R')
runApp('C:/Users/Jason/Google Drive/Brown/c_stats-computing_1/final_project/mapping_project/app/Counties/app_2016_11_29.R')
runApp('C:/Users/Jason/Google Drive/Brown/c_stats-computing_1/final_project/mapping_project/app/Counties/app_2016_11_29.R')
load("basefile.Rda")
setwd("C:/Users/Jason/Google Drive/Brown/c_stats-computing_1/final_project/mapping_project/app/Counties")
load("data/basefile.Rda")
library(sjPlot)
sjt.frq(basefile$party_2012)
?sjt.frq
sjt.frq(basefile$party_2012, ignore.strings = T)
sjt.frq(basefile$party_2012, ignore.strings = TRUE)
sjt.frq(basefile$party_2012, ignore.strings = FALSE)
sjtab(basefile$party_2012)
sjtab(basefile)
sjt.frq(basefile$party_2012, ignore.strings = FALSE)
table(basefile$party_2012)
sjt.frq(basefile$party_2012)
View(basefile)
typeof(basefile$party_2012)
sjt.frq(basefile$flip)
runApp('app_2016_11_29.R')
sjt.frq(basefile[[flip]])
sjt.frq(basefile[flip])
sjt.frq(basefile$flip)
runApp('app_2016_11_29.R')
runApp('app_2016_11_29.R')
runApp('app_2016_11_29.R')
runApp()
runApp()
runApp()
runApp('C:/Users/Jason/Google Drive/Brown/c_stats-computing_1/final_project/mapping_project/app/test')
runApp('C:/Users/Jason/Google Drive/Brown/c_stats-computing_1/final_project/mapping_project/app/test')
runApp('C:/Users/Jason/Google Drive/Brown/c_stats-computing_1/final_project/mapping_project/app/test')
runApp('C:/Users/Jason/Google Drive/Brown/c_stats-computing_1/final_project/mapping_project/app/test')
runApp('C:/Users/Jason/Google Drive/Brown/c_stats-computing_1/final_project/mapping_project/app/test')
runApp('C:/Users/Jason/Google Drive/Brown/c_stats-computing_1/final_project/mapping_project/app/test')
runApp('C:/Users/Jason/Google Drive/Brown/c_stats-computing_1/final_project/mapping_project/app/test')
runApp('C:/Users/Jason/Google Drive/Brown/c_stats-computing_1/final_project/mapping_project/app/test')
summary(basefile$FIPS)
runApp('C:/Users/Jason/Google Drive/Brown/c_stats-computing_1/final_project/mapping_project/app/test')
runApp()
runApp('C:/Users/Jason/Google Drive/Brown/c_stats-computing_1/final_project/mapping_project/app/test')
runApp('C:/Users/Jason/Google Drive/Brown/c_stats-computing_1/final_project/mapping_project/app/test')
runApp('C:/Users/Jason/Google Drive/Brown/c_stats-computing_1/final_project/mapping_project/app/test')
runApp('C:/Users/Jason/Google Drive/Brown/c_stats-computing_1/final_project/mapping_project/app/test')
runApp('C:/Users/Jason/Google Drive/Brown/c_stats-computing_1/final_project/mapping_project/app/test')
runApp('C:/Users/Jason/Google Drive/Brown/c_stats-computing_1/final_project/mapping_project/app/test')
runApp('C:/Users/Jason/Google Drive/Brown/c_stats-computing_1/final_project/mapping_project/app/test')
runApp('C:/Users/Jason/Google Drive/Brown/c_stats-computing_1/final_project/mapping_project/app/test')
runApp('C:/Users/Jason/Google Drive/Brown/c_stats-computing_1/final_project/mapping_project/app/test')
runApp('C:/Users/Jason/Google Drive/Brown/c_stats-computing_1/final_project/mapping_project/app/test')
runApp('C:/Users/Jason/Google Drive/Brown/c_stats-computing_1/final_project/mapping_project/app/test')
runApp('C:/Users/Jason/Google Drive/Brown/c_stats-computing_1/final_project/mapping_project/app/test')
runApp('C:/Users/Jason/Google Drive/Brown/c_stats-computing_1/final_project/mapping_project/app/test')
library(shiny); runApp('app_2016_11_29_830p.R')
runApp('app_2016_11_29_830p.R')
runApp('app_2016_11_29_830p.R')
install.packages(c("choroplethrMaps", "choroplethr"))
install.packages(c("choroplethrMaps", "choroplethr"))
?choroplethr
??choroplehtr
?choroplethrMaps
??choroplethrMaps
library(shiny); runApp('app_2016_11_29_830p.R')
library(shiny); runApp('app_2016_11_29_830p.R')
runApp('app_2016_11_29_830p.R')
runApp('app_2016_11_29_830p.R')
library(choroplethrMaps)
data(county.regions)
View(county.regions)
typeof(county.regions$region)
runApp('app_2016_11_29_830p.R')
runApp('app_2016_11_29_830p.R')
runApp('app_2016_11_29_830p.R')
load("basefile.Rda")
setwd("C:/Users/Jason/Google Drive/Brown/c_stats-computing_1/final_project/mapping_project/app/Counties/data")
load("basefile.Rda")
View(basefile)
typeof(basefile$FIPS)
n <- data.frame()
runApp('C:/Users/Jason/Google Drive/Brown/c_stats-computing_1/final_project/mapping_project/app/Counties/app_2016_11_29_830p.R')
n <- basefile(unique(basefile$FIPS),)
n <- basefile[unique(basefile$FIPS),]
duplicated(basefile$FIPS)
n <- basefile[duplicated(basefile$FIPS),]
runApp('C:/Users/Jason/Google Drive/Brown/c_stats-computing_1/final_project/mapping_project/app/Counties/app_2016_11_29_830p.R')
mapset <- data.frame("region" = as.numeric(basefile$FIPS))
mapset <- data.frame("region" = as.numeric(as.character(basefile$FIPS)))
mapset <- data.frame("region" = as.numeric(as.factor(basefile$FIPS)))
mapset <- data.frame("region" = as.numeric(as.factor(basefile$FIPS)))
View(mapset)
mapset <- data.frame("region" = as.numeric(as.factor(basefile$FIPS)))
View(basefile)
mapset <- data.frame("region" = as.factor(basefile$FIPS))
View(mapset)
mapset$regn <- as.numeric(mapset$region)
View(mapset)
mapset$regn <- as.numeric(as.character(mapset$region))
mapset$regn <- as.numeric(as.character(mapset$region))
mapset$regn <- as.character(mapset$region)
View(mapset)
mapset$f <- as.numeric(mapset$regn)
View(mapset)
View(county.regions)
runApp('C:/Users/Jason/Google Drive/Brown/c_stats-computing_1/final_project/mapping_project/app/Counties/app_2016_11_29_830p.R')
