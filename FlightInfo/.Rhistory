shiny::runApp()
shiny::runApp()
setwd("~/Desktop/ShinyApp")
##Design A
##Preliminary Calculations
##Preliminary Calculations
cat("P of the logit function must be in the interval [0,1]")
##Design A
shiny::runApp()
shiny::runApp()
shiny::runApp()
setwd("~/Desktop/ShinyApp")
setwd("~/Desktop/ShinyApp")
---
title: "Comparison result Dec 6"
author: "yifu liu"
date: "Saturday, December 06, 2014"
output: pdf_document
---
```{r}
setwd("~/Desktop/ShinyApp")
source("FUN2.R")
################Power for FUN2: setting 1########################:
beta00=-0.5
beta1=0.3
auc =0.92
rho =0.05
prev=rho
b.hat <- uniroot(Accuracy.Equation2, lower=0, upper=10, auc=auc, prev=prev)$root
a.hat <- uniroot(Prevalence.Equation2, lower=-100, upper=100, b=b.hat, prev=prev)$root
N <- 1000
simdata <- simulate.DesignB2(N, beta00, beta1, a.hat, b.hat, 0.1)
v0 <- var(simdata$p.RA[simdata$d.true==0 & simdata$U==1])
v1 <- var(simdata$p.RA[simdata$d.true==1 & simdata$U==1])
mu0 <- mean(simdata$p.RA[simdata$d.true==0 & simdata$U==1])
mu1 <- mean(simdata$p.RA[simdata$d.true==1 & simdata$U==1])
x0<-exp(beta00)/(1+exp(beta00))
x1<-exp(beta1)
v0
v1
mu0
mu1
x0
x1
B <- 100
pvalues <- rep(0, B)
for(i in 1:B){
set.seed(i)
simdata <- simulate.DesignB2(N, beta00, beta1, a.hat, b.hat, 0.1)
test.result <- test.DesignB(simdata$p.RA, simdata$z, cov=NULL, mu0=mu0, mu1=mu1, rho =0.05, piu=0.1)
pvalues[i] <- test.result$coef[2,4]
if(i%%20==0){print(i)}
}
power <- mean(pvalues<0.05)
power
################Power for Powercal: setting 1########################:
source("Powercal.R")
theta<-x1
wp<-x0
pi_hat<-0.05*0.1
beta1 <- log(theta)
beta1
beta0 <- optimize(f=beta0.obj, interval=c(logit(pi_hat)-10*abs(logit(pi_hat)),logit(pi_hat)+10*abs(logit(pi_hat))), wp=wp, pi_hat=pi_hat, beta1=beta1)$minimum
beta0
beta0.der(wp, pi_hat, beta0, beta1)
powerB(v0, v1, mu0, mu1, wp, theta, 0.1, 0.05, 0.05, N)
```
```{r}
---
```{r}
setwd("~/Desktop/ShinyApp")
source("FUN2.R")
################Power for FUN2: setting 1########################:
install.packages("nleqslv")
beta00=-0.5
---
title: "Comparison result Dec 6"
author: "yifu liu"
date: "Saturday, December 06, 2014"
output: pdf_document
---
```{r}
setwd("~/Desktop/ShinyApp")
source("FUN2.R")
################Power for FUN2: setting 1########################:
beta00=-0.5
beta1=0.3
auc =0.92
rho =0.05
prev=rho
b.hat <- uniroot(Accuracy.Equation2, lower=0, upper=10, auc=auc, prev=prev)$root
a.hat <- uniroot(Prevalence.Equation2, lower=-100, upper=100, b=b.hat, prev=prev)$root
N <- 1000
simdata <- simulate.DesignB2(N, beta00, beta1, a.hat, b.hat, 0.1)
v0 <- var(simdata$p.RA[simdata$d.true==0 & simdata$U==1])
v1 <- var(simdata$p.RA[simdata$d.true==1 & simdata$U==1])
mu0 <- mean(simdata$p.RA[simdata$d.true==0 & simdata$U==1])
mu1 <- mean(simdata$p.RA[simdata$d.true==1 & simdata$U==1])
x0<-exp(beta00)/(1+exp(beta00))
x1<-exp(beta1)
v0
v1
mu0
mu1
x0
x1
B <- 100
pvalues <- rep(0, B)
for(i in 1:B){
set.seed(i)
simdata <- simulate.DesignB2(N, beta00, beta1, a.hat, b.hat, 0.1)
test.result <- test.DesignB(simdata$p.RA, simdata$z, cov=NULL, mu0=mu0, mu1=mu1, rho =0.05, piu=0.1)
pvalues[i] <- test.result$coef[2,4]
if(i%%20==0){print(i)}
}
power <- mean(pvalues<0.05)
power
################Power for Powercal: setting 1########################:
source("Powercal.R")
theta<-x1
wp<-x0
pi_hat<-0.05*0.1
beta1 <- log(theta)
beta1
beta0 <- optimize(f=beta0.obj, interval=c(logit(pi_hat)-10*abs(logit(pi_hat)),logit(pi_hat)+10*abs(logit(pi_hat))), wp=wp, pi_hat=pi_hat, beta1=beta1)$minimum
beta0
beta0.der(wp, pi_hat, beta0, beta1)
powerB(v0, v1, mu0, mu1, wp, theta, 0.1, 0.05, 0.05, N)
```
---
---
setwd("~/Desktop/ShinyApp")
setwd("~/Desktop/ShinyApp")
shiny::runApp()
shiny::runApp()
shiny::runApp()
##Design A
##Design A
source('~/Desktop/ShinyApp/Powercal/Powercal.R')
##Design A
##Preliminary Calculations
##our model is logit{P(D=1|Z)}=beta0+beta1*Z
##define the logit function
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
##define the logit function
tryfunc<-function(z){
shiny::runApp()
.
/
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
library("ggmap")
library(maptools)
library(maps)
library(dplyr)
q1table6_2015<-read.csv('2015_q1_table6.csv',header=TRUE,stringsAsFactors=FALSE)
# Graph on the map all the airline that departs from city1
# load city1 data(just one city) into data frame
start_city<-"New York City, NY (Metropolitan Area)"
start<-gsub("\\s*\\([^\\)]+\\)","",as.character(start_city))
ll.start<-geocode(start)
star<-data.frame(start,ll.start)
#load city2 data( all cities related to city1 into a data frame
visited_city<-filter(q1table6_2015,q1table6_2015$city1=="New York City, NY (Metropolitan Area)")
visited<-gsub("\\s*\\([^\\)]+\\)","",as.character(visited_city$city2))
ll.visited<-geocode(visited)
visited.fare.table<-filter(q1table6_2015,q1table6_2015$city1=="New York City, NY (Metropolitan Area)")
visited.fare<-visited.fare.table$fare
geo<-data.frame(visited,ll.visited,visited.fare)
new<-data.frame(star,geo)
#plot the state included us map first
# them add points showing the longtitude and lattitude information of city 1
# the add points of all city2
# connect city 1 and city 2s with lines
all_states <- map_data("state")
p<-ggplot()
p<-p + geom_polygon(data=all_states, aes(x=long, y=lat, group = group),colour="white", fill="grey10")
p_city<-p+geom_point( data=geo, aes(x=lon, y=lat), color="red",size=2)
p_withpoint<-p_city+geom_point( data=star, aes(x=lon, y=lat),color="blue",size=5) + geom_segment(data=new,aes(x=lon,y=lat,xend=lon.1,yend=lat.1),color=visited.fare, arrow=arrow(length=unit(0.3,"cm")),show.legend = TRUE)
p_withtext<-p_withpoint+geom_text(aes(x=lon, y=lat,label = visited),data=geo,color="pink",size=2.5)
p_withtext
setwd("~/Desktop/computing")
library("ggmap")
library(maptools)
library(maps)
library(dplyr)
q1table6_2015<-read.csv('2015_q1_table6.csv',header=TRUE,stringsAsFactors=FALSE)
# Graph on the map all the airline that departs from city1
# load city1 data(just one city) into data frame
start_city<-"New York City, NY (Metropolitan Area)"
start<-gsub("\\s*\\([^\\)]+\\)","",as.character(start_city))
ll.start<-geocode(start)
star<-data.frame(start,ll.start)
#load city2 data( all cities related to city1 into a data frame
visited_city<-filter(q1table6_2015,q1table6_2015$city1=="New York City, NY (Metropolitan Area)")
visited<-gsub("\\s*\\([^\\)]+\\)","",as.character(visited_city$city2))
ll.visited<-geocode(visited)
setwd("~/Desktop/computing/final")
library("ggmap")
library(maptools)
library(maps)
library(dplyr)
q1table6_2015<-read.csv('2015_q1_table6.csv',header=TRUE,stringsAsFactors=FALSE)
# Graph on the map all the airline that departs from city1
# load city1 data(just one city) into data frame
start_city<-"New York City, NY (Metropolitan Area)"
start<-gsub("\\s*\\([^\\)]+\\)","",as.character(start_city))
ll.start<-geocode(start)
star<-data.frame(start,ll.start)
#load city2 data( all cities related to city1 into a data frame
visited_city<-filter(q1table6_2015,q1table6_2015$city1=="New York City, NY (Metropolitan Area)")
visited<-gsub("\\s*\\([^\\)]+\\)","",as.character(visited_city$city2))
ll.visited<-geocode(visited)
visited.fare.table<-filter(q1table6_2015,q1table6_2015$city1=="New York City, NY (Metropolitan Area)")
visited.fare<-visited.fare.table$fare
geo<-data.frame(visited,ll.visited,visited.fare)
new<-data.frame(star,geo)
#plot the state included us map first
# them add points showing the longtitude and lattitude information of city 1
# the add points of all city2
# connect city 1 and city 2s with lines
all_states <- map_data("state")
p<-ggplot()
p<-p + geom_polygon(data=all_states, aes(x=long, y=lat, group = group),colour="white", fill="grey10")
p_city<-p+geom_point( data=geo, aes(x=lon, y=lat), color="red",size=2)
p_withpoint<-p_city+geom_point( data=star, aes(x=lon, y=lat),color="blue",size=5) + geom_segment(data=new,aes(x=lon,y=lat,xend=lon.1,yend=lat.1),color=visited.fare, arrow=arrow(length=unit(0.3,"cm")),show.legend = TRUE)
p_withtext<-p_withpoint+geom_text(aes(x=lon, y=lat,label = visited),data=geo,color="pink",size=2.5)
p_withtext
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
